generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String      @id @default(cuid())
  email                 String      @unique
  password              String
  name                  String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  metaAccessToken       String?
  metaAppSecret         String?
  metaPhoneNumberId     String?
  metaVerifyToken       String?
  metaBusinessAccountId String?
  broadcasts            Broadcast[]
  contacts              Contact[]
  flows                 Flow[]
}

model Contact {
  id                  String               @id @default(cuid())
  phone               String               @unique
  name                String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  userId              String
  notes               String?
  broadcastRecipients BroadcastRecipient[]
  user                User                 @relation(fields: [userId], references: [id])
  logs                Log[]
  sessions            Session[]
  tags                TagsOnContacts[]
}

model Tag {
  id       String           @id @default(cuid())
  name     String           @unique
  contacts TagsOnContacts[]
}

model TagsOnContacts {
  contactId String
  tagId     String
  contact   Contact @relation(fields: [contactId], references: [id])
  tag       Tag     @relation(fields: [tagId], references: [id])

  @@id([contactId, tagId])
}

model Flow {
  id                 String      @id @default(cuid())
  name               String
  trigger            String
  status             String      @default("Draft")
  definition         Json?
  channel            String      @default("whatsapp")
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  userId             String
  metaFlowId         String?     @unique
  metaFlowMetadata   Json?
  metaFlowRevisionId String?
  metaFlowStatus     String?
  metaFlowToken      String?
  metaFlowVersion    String?
  broadcasts         Broadcast[]
  user               User        @relation(fields: [userId], references: [id])
  logs               Log[]
  sessions           Session[]
}

model Log {
  id        String   @id @default(cuid())
  status    String
  context   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contactId String
  flowId    String
  contact   Contact  @relation(fields: [contactId], references: [id])
  flow      Flow     @relation(fields: [flowId], references: [id])
}

model Session {
  id            String   @id @default(cuid())
  status        String   @default("Active")
  currentNodeId String?
  context       Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  contactId     String
  flowId        String
  contact       Contact  @relation(fields: [contactId], references: [id])
  flow          Flow     @relation(fields: [flowId], references: [id])

  @@unique([contactId, flowId])
}

model Broadcast {
  id              String               @id @default(cuid())
  title           String?
  body            String
  filterTag       String?
  status          String               @default("Draft")
  totalRecipients Int                  @default(0)
  successCount    Int                  @default(0)
  failureCount    Int                  @default(0)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  userId          String
  flowId          String?
  flow            Flow?                @relation(fields: [flowId], references: [id])
  user            User                 @relation(fields: [userId], references: [id])
  recipients      BroadcastRecipient[]
}

model BroadcastRecipient {
  id              String    @id @default(cuid())
  status          String    @default("Pending")
  error           String?
  sentAt          DateTime?
  createdAt       DateTime  @default(now())
  broadcastId     String
  contactId       String
  conversationId  String?
  messageId       String?   @unique
  statusUpdatedAt DateTime?
  broadcast       Broadcast @relation(fields: [broadcastId], references: [id])
  contact         Contact   @relation(fields: [contactId], references: [id])
}

model Lead {
  id        String   @id @default(cuid())
  name      String
  email     String
  company   String?
  phone     String?
  message   String
  status    String   @default("new")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notes     String?
  focusArea String?
}
